service cloud.firestore {
    match /databases/{database}/documents {
        function existingData() {
            return resource.data
        }

        function incomingData() {
            return request.resource.data
        }

        function isSignedIn() {
            return request.auth.uid != null && request.auth.token.firebase.sign_in_provider != 'anonymous'
        }
        
        function isUsersOwnData(userId) {
        	return isSignedIn() && request.auth.uid == userId
        }
        
        
        // HelpRequest
        //
        // users can read & create help requests
        // users can update & delete their own help requests
        match /help-requests/{requestId} {
            allow read;
            allow create: if isSignedIn()
            //allow update, delete: if isUsersOwnData(resource.data.userId)
        }


        // Inbox
        // conversation document id is made up of <user1.uid>-<user2.uid>
        //
        // users can get conversation details for any conversation where they are in the userIds array.
        // users can create a conversation if:
        //  1. the document id contains their uid
        //  2. both uids in the document id are not the same
        //  3. it doesn't already exist
        //  4. both uids in the doucument id are valid users
        match /inbox/{conversationId} {
        	allow read: if isSignedIn() && request.auth.uid in existingData().userIds
	       	allow create: if isSignedIn()
          				    && request.auth.uid in conversationId.split('-')
                            && conversationId.split('-')[0] != conversationId.split('-')[1]
                            && !exists(/databases/$(database)/documents/inbox/$(conversationId))
                            && exists(/databases/$(database)/documents/users/$(conversationId.split('-')[0]))
                            && exists(/databases/$(database)/documents/users/$(conversationId.split('-')[1]))
        }
        // users can read messages if the conversation document id contains their uid.
        match /inbox/{conversationId}/messages/{message} {
           allow create, read: if isSignedIn()
          						 && (conversationId.split('-')[0] == request.auth.uid
          						 || conversationId.split('-')[1] == request.auth.uid)
        }


        // Users
        //
        // users can read their own profile
        // users can create their own profile if it doesn't already exist
        // users can update some fields of their profile
        // match /users/{userId} {
        //     allow read: if isUsersOwnData(userId)
            
        //     allow create: if isUsersOwnData(userId)
        //                   && incomingData().size() == 3
        //                   && incomingData().keys().hasAll(['name','photoURL','created'])
        //                   && incomingData().name is string
        //                   && incomingData().photoURL is string
        //                   && incomingData().created is timestamp
        //                   && !exists(/databases/$(database)/documents/users/$(userId))
            
        //     allow update: if isUsersOwnData(userId)
        //                   && incomingData().keys().hasOnly(['name','photoURL'])
        //                   && incomingData().name is string
        //                   && incomingData().photoURL is string
        // }
    }
}